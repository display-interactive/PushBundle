<?php

namespace Display\PushBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    /**
     * @return array|Message[]
     */
    public function getPendings()
    {
        $dql = 'SELECT m, mt
                FROM DisplayPushBundle:Message m
                JOIN m.messageType mt
                WHERE m.isPending = :is_pending';

        return $this
            ->getEntityManager()
            ->createQuery($dql)
            ->setParameter('is_pending', true)
            ->getResult()
        ;
    }

    /**
     * @param Message $message
     * @return bool
     */
    public function isProceed(Message $message)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(s.id)
                FROM DisplayPushBundle:Sending s
                JOIN s.message m
                WHERE m.id = :message_id';

        $nbSendings = $em->createQuery($dql)
            ->setParameter('message_id', $message->getId())
            ->getSingleScalarResult()
        ;

        $rsm = new ResultSetMappingBuilder($em);
        $rsm->addScalarResult('nb_devices', 'nbDevices');

        $appIds = array();
        /** @var Application $app */
        foreach ($message->getApplications() as $app) {
            $appIds[] = $app->getId();
        }

        $sql = "SELECT COUNT(d.id) AS nb_devices
                FROM push_device d
                JOIN push_application a ON a.id = d.application_id
                LEFT JOIN push_device_exception de ON d.id = de.device_id AND de.message_type_id = :message_type_id
                WHERE d.status = :status
                  AND a.id IN (:app_ids)
                  AND de.id IS NULL";

        $nbDevices = $em->createNativeQuery($sql, $rsm)
            ->setParameters(array(
                'status' => DeviceRepository::STATUS_ACTIVE,
                'message_type_id' => $message->getMessageType()->getId(),
                'app_ids' => $appIds,
            ))
            ->getSingleScalarResult()
        ;

        return $nbSendings >= $nbDevices;
    }
}
