<?php

namespace Display\PushBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeviceRepository extends EntityRepository
{
    const STATUS_ACTIVE = 'active';
    const STATUS_UNINSTALLED = 'unistalled';

    const OS_ANDROID = 'android';
    const OS_IOS = 'ios';

    /**
     * @return array
     */
    public static function getStatuses()
    {
        return array(
            self::STATUS_ACTIVE,
            self::STATUS_UNINSTALLED
        );
    }

    /**
     * @return array
     */
    public static function getOperatingSystems()
    {
        return array(
            self::OS_ANDROID => self::OS_ANDROID,
            self::OS_IOS => self::OS_IOS
        );
    }

    /**
     * @return array|Device[]
     */
    public function getActives()
    {
        $dql = 'SELECT d, de
                FROM DisplayPushBundle:Device d
                LEFT JOIN d.exceptions de
                WHERE d.status = :status';

        return $this
            ->getEntityManager()
            ->createQuery($dql)
            ->setParameter('status', self::STATUS_ACTIVE)
            ->getResult()
        ;
    }

    /**
     * @param Message $message
     * @param integer $limit
     * @return array|Device[]
     */
    public function getActivesByMessage(Message $message, $limit = 10000)
    {
        $rsm = new ResultSetMapping();
        $rsm
            ->addEntityResult('Display\PushBundle\Entity\Device', 'd')
            ->addFieldResult('d', 'id', 'id')
            ->addFieldResult('d', 'created_at', 'createdAt')
            ->addFieldResult('d', 'updated_at', 'updatedAt')
            ->addFieldResult('d', 'uid', 'uid')
            ->addFieldResult('d', 'token', 'token')
            ->addFieldResult('d', 'model', 'model')
            ->addFieldResult('d', 'locale', 'locale')
            ->addFieldResult('d', 'os_name', 'osName')
            ->addFieldResult('d', 'os_version', 'osVersion')
            ->addFieldResult('d', 'status', 'status')
            ->addJoinedEntityResult('Display\PushBundle\Entity\DeviceException', 'de', 'd', 'exceptions')
            ->addFieldResult('de', 'de_id', 'id')
            ->addJoinedEntityResult('Display\PushBundle\Entity\MessageType', 'mt', 'de', 'messageType')
            ->addFieldResult('mt', 'message_type_id', 'id')
            ->addFieldResult('mt', 'text', 'text')
            ->addJoinedEntityResult('Display\PushBundle\Entity\Application', 'a', 'd', 'application')
            ->addFieldResult('a', 'application_id', 'id')
            ->addFieldResult('a', 'name', 'name')
            ->addFieldResult('a', 'version', 'version')
        ;

        $sql = 'SELECT d.id, d.created_at, d.updated_at, d.uid, d.token, d.model, d.locale,
                  d.os_name, d.os_version, d.status,
                  de.id AS de_id, de.message_type_id, mt.text,
                  d.application_id, a.name, a.version
                FROM push_device d
                JOIN push_application a ON a.id = d.application_id
                LEFT JOIN push_sending s ON s.device_id = d.id AND s.message_id = :message_id
                LEFT JOIN push_message m ON s.message_id = m.id
                LEFT JOIN push_device_exception de ON de.device_id = d.id AND de.message_type_id = m.message_type_id
                LEFT JOIN push_message_type mt ON mt.id = de.message_type_id
                WHERE de.message_type_id IS NULL
                  AND d.status = :status
                  AND s.id IS NULL
                LIMIT ' . $limit;

        return $this
            ->getEntityManager()
            ->createNativeQuery($sql, $rsm)
            ->setParameters(array(
                'status' => self::STATUS_ACTIVE,
                'message_id' => $message->getId()
            ))
            ->getResult()
        ;
    }

    /**
     * @param Message $message
     * @param integer $limit
     * @return array|Device[]
     */
    public function findDevicesByMessage(Message $message, $limit = 10000)
    {
        $rsm = new ResultSetMapping();
        $rsm
            ->addEntityResult('Display\PushBundle\Entity\Device', 'd')
            ->addFieldResult('d', 'id', 'id')
            ->addFieldResult('d', 'created_at', 'createdAt')
            ->addFieldResult('d', 'updated_at', 'updatedAt')
            ->addFieldResult('d', 'uid', 'uid')
            ->addFieldResult('d', 'token', 'token')
            ->addFieldResult('d', 'model', 'model')
            ->addFieldResult('d', 'locale', 'locale')
            ->addFieldResult('d', 'os_name', 'osName')
            ->addFieldResult('d', 'os_version', 'osVersion')
            ->addFieldResult('d', 'status', 'status')
            ->addJoinedEntityResult('Display\PushBundle\Entity\DeviceException', 'de', 'd', 'exceptions')
            ->addFieldResult('de', 'de_id', 'id')
            ->addJoinedEntityResult('Display\PushBundle\Entity\MessageType', 'mt', 'de', 'messageType')
            ->addFieldResult('mt', 'message_type_id', 'id')
            ->addFieldResult('mt', 'text', 'text')
            ->addJoinedEntityResult('Display\PushBundle\Entity\Application', 'a', 'd', 'application')
            ->addFieldResult('a', 'application_id', 'id')
            ->addFieldResult('a', 'name', 'name')
            ->addFieldResult('a', 'version', 'version')
        ;

        $sql = 'SELECT d.id, d.created_at, d.updated_at, d.uid, d.token, d.model, d.locale,
                  d.os_name, d.os_version, d.status,
                  de.id AS de_id, de.message_type_id, mt.text,
                  d.application_id, a.name, a.version
                FROM push_device d
                JOIN push_application a ON a.id = d.application_id
                LEFT JOIN push_sending s ON s.device_id = d.id AND s.message_id = :message_id
                LEFT JOIN push_device_exception de ON de.device_id = d.id
                LEFT JOIN push_message_type mt ON mt.id = de.message_type_id
                WHERE d.status = :status
                  AND s.id IS NULL
                LIMIT ' . $limit;

        return $this
            ->getEntityManager()
            ->createNativeQuery($sql, $rsm)
            ->setParameters(array(
                'status' => self::STATUS_ACTIVE,
                'message_id' => $message->getId()
            ))
            ->getResult()
            ;
    }

    /**
     * Get device by Uid
     *
     * @param string $os
     * @param array $applicationIds
     * @param string $locale
     * @param array $uids
     * @return array
     */
    public function findByUids($os = null, $applicationIds = array(), $locale = null, array $uids)
    {
        $qb = $this
            ->createQueryBuilder('d')
            ->addSelect('de')
            ->leftJoin('d.exceptions', 'de')
        ;

        if ($os) {
            $qb
                ->andWhere('d.osName = :os')
                ->setParameter('os', $os)
            ;
        }

        if (count($applicationIds) > 0) {
            $qb
                ->leftJoin('d.application', 'a')
                ->andWhere($qb->expr()->in('a.id', ':application_id'))
                ->setParameter('application_id', $applicationIds)
            ;
        }

        if ($locale) {
            $qb
                ->andWhere('d.locale = :locale')
                ->setParameter('locale', $locale)
            ;
        }

        if (count($uids) > 0) {
            $qb
                ->andWhere($qb->expr()->in('d.uid', ':uids'))
                ->setParameter('uids', $uids)
            ;
        }

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }
}
